# Define an upstream for our Node.js application.
# In a Docker Compose environment, we can use the service name 'app' to connect.
upstream app_server {
    # The <PORT> must match the port your Node.js app is listening on inside the container.
    server app:8000;
}

server {
    # The port Nginx listens on.
    listen 80;

    # =====================================
    # == Enter your domain name here ==
    # =====================================
    server_name your_domain.com www.your_domain.com;

    # Log paths
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Forward all requests to the upstream Node.js application.
    location / {
        proxy_pass http://app_server;

        # Set headers to pass client information to the backend application.
        # These are crucial for the backend to get the real client IP and protocol.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Required for WebSocket connections, if any.
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # You can also set up caching for static assets to improve performance.
    # location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
    #     expires 1y;
    # }
}